datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Run {
  id             String     @id @default(cuid())
  runNumber      Int        @unique @default(autoincrement())
  status         Status
  browser        String
  platform       String
  deviceType     DeviceType
  environment    Json
  featuresCount  Int
  scenariosCount Int
  stepsCount     Int

  // Счётчики по статусам — для ФИЧ
  featurePassCount      Int @default(0)
  featureFailCount      Int @default(0)
  featureSkipCount      Int @default(0)
  featureBlockedCount   Int @default(0)
  featureRetestCount    Int @default(0)
  featureUntestedCount  Int @default(0)
  featureUndefinedCount Int @default(0)

  // Счётчики по статусам — для СЦЕНАРИЕВ
  scenarioPassCount      Int @default(0)
  scenarioFailCount      Int @default(0)
  scenarioSkipCount      Int @default(0)
  scenarioBlockedCount   Int @default(0)
  scenarioRetestCount    Int @default(0)
  scenarioUntestedCount  Int @default(0)
  scenarioUndefinedCount Int @default(0)

  // Счётчики по статусам — для ШАГОВ
  stepPassCount      Int @default(0)
  stepFailCount      Int @default(0)
  stepSkipCount      Int @default(0)
  stepBlockedCount   Int @default(0)
  stepRetestCount    Int @default(0)
  stepUntestedCount  Int @default(0)
  stepUndefinedCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  duration  Int?
  auto      Boolean

  archived Boolean @default(false)

  RunFeature  RunFeature[]
  RunScenario RunScenario[]
  RunStep     RunStep[]

  @@index([status])
  @@index([platform])
  @@index([auto])
  @@index([createdAt])
  @@index([status, createdAt])
  @@map("runs")
}

model RunFeature {
  id        String   @id @default(cuid())
  runId     String
  featureId String
  status    Status
  duration  Int?
  createdAt DateTime @default(now())

  run     Run     @relation(fields: [runId], references: [id], onDelete: Cascade)
  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([runId, featureId])
  @@map("run_features")
}

model RunScenario {
  id         String    @id @default(cuid())
  runId      String
  scenarioId String
  status     Status
  duration   Int?      @default(0)
  startedAt  DateTime?
  pausedAt   DateTime?
  endedAt    DateTime?
  createdAt  DateTime  @default(now())

  run      Run      @relation(fields: [runId], references: [id], onDelete: Cascade)
  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  @@unique([runId, scenarioId])
  @@map("run_scenarios")
}

model RunStep {
  id           String   @id @default(cuid())
  runId        String
  stepId       String
  scenarioId   String
  status       Status
  duration     Int?
  errorMessage String?
  stackTrace   String?
  media        String?
  createdAt    DateTime @default(now())

  run          Run            @relation(fields: [runId], references: [id], onDelete: Cascade)
  step         Step           @relation(fields: [stepId], references: [id], onDelete: Cascade)
  scenario     Scenario       @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  RunStepMedia RunStepMedia[]

  @@unique([runId, stepId, scenarioId])
  @@map("run_steps")
}

model FeatureFile {
  id            String   @id @default(cuid())
  path          String   @unique
  contentHash   String
  lastCommitSha String?
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  features Feature[]

  @@map("feature_files")
}

model Feature {
  id                 String              @id @default(cuid())
  keyword            String
  name               String
  description        String?
  active             Boolean             @default(true)
  contentHash        String?             @map("contenthash")
  position           Int
  featureTags        FeatureTag[]
  RunFeature         RunFeature[]
  MapNodeFeatureData MapNodeFeatureData?
  FeatureFile        FeatureFile?        @relation(fields: [featureFileId], references: [id])
  featureFileId      String?

  @@map("features")
}

model Scenario {
  id           String        @id @default(cuid())
  featureId    String
  keyword      String
  name         String
  description  String?
  active       Boolean       @default(true)
  contentHash  String?       @map("contenthash")
  position     Int
  scenarioTags ScenarioTag[]

  steps       ScenarioStep[]
  RunScenario RunScenario[]
  RunStep     RunStep[]

  @@unique([featureId, contentHash])
  @@index([featureId])
  @@map("scenarios")
}

model Step {
  id           String         @id @default(cuid())
  keyword      String
  name         String
  contentHash  String?        @map("contenthash")
  active       Boolean        @default(true)
  media        String?
  ScenarioStep ScenarioStep[]
  RunStep      RunStep[]
  StepMedia    StepMedia[]

  @@unique([keyword, name, contentHash])
  @@map("steps")
}

model ScenarioStep {
  scenarioId String
  stepId     String
  keyword    String
  position   Int

  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  step     Step     @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@id([scenarioId, stepId, keyword])
  @@map("scenario_steps")
}

model Tag {
  id           String        @id @default(cuid())
  name         String        @unique
  featureTags  FeatureTag[]
  scenarioTags ScenarioTag[]

  @@map("tags")
}

model FeatureTag {
  featureId String
  tagId     String

  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([featureId, tagId])
  @@map("features_tags")
}

model ScenarioTag {
  scenarioId String
  tagId      String

  scenario Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id])

  @@id([scenarioId, tagId])
  @@map("scenarios_tags")
}

enum Status {
  passed
  failed
  blocked
  retest
  skipped
  untested
  undefined
}

model StepMedia {
  id     String     @id @default(cuid())
  stepId String
  type   DeviceType
  src    String
  step   Step       @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([stepId, type])
  @@map("step_media")
}

model RunStepMedia {
  id        String     @id @default(cuid())
  runStepId String
  type      DeviceType
  src       String
  runStep   RunStep    @relation(fields: [runStepId], references: [id], onDelete: Cascade)

  @@unique([runStepId, type])
  @@map("run_step_media")
}

enum DeviceType {
  desktop
  tablet
  mobile
}

model MapNode {
  id       String  @id @default(cuid())
  x        Float
  y        Float
  width    Int     @default(100)
  height   Int     @default(100)
  rotation Int     @default(0)
  scale    Float   @default(1)
  hidden   Boolean
  zIndex   Int?

  featureData MapNodeFeatureData?
  imageData   MapNodeImageData?

  outgoingDependencies MapNodeDependency[] @relation("SourceNode")
  incomingDependencies MapNodeDependency[] @relation("TargetNode")

  @@map("map_nodes")
}

model MapNodeFeatureData {
  id        String  @id @default(cuid())
  featureId String  @unique
  mapNodeId String  @unique
  mapNode   MapNode @relation(fields: [mapNodeId], references: [id], onDelete: Cascade)
  feature   Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@map("map_node_feature_data")
}

model MapNodeImageData {
  id        String  @id @default(cuid())
  src       String
  mapNodeId String  @unique
  mapNode   MapNode @relation(fields: [mapNodeId], references: [id], onDelete: Cascade)

  @@map("map_node_image_data")
}

model MapNodeDependency {
  id           String @id @default(cuid())
  sourceNodeId String
  targetNodeId String

  sourceNode MapNode @relation("SourceNode", fields: [sourceNodeId], references: [id], onDelete: Cascade)
  targetNode MapNode @relation("TargetNode", fields: [targetNodeId], references: [id], onDelete: Cascade)

  @@unique([sourceNodeId, targetNodeId])
  @@map("map_node_dependencies")
}

model UserActivity {
  id         String       @id @default(cuid())
  projectId  String
  userId     String
  runId      String
  scenarioId String?
  stepId     String?
  type       ActivityType
  startedAt  DateTime
  endedAt    DateTime
  metadata   Json? // например { ticketUrl: "...", reason: "creating bug" }

  @@index([userId])
  @@index([runId])
  @@index([scenarioId])
  @@index([stepId])
  @@map("user_activity")
}

enum ActivityType {
  MANUAL_TESTING // обычная активность: выполнение тест ранов
  BUG_REPORT // создание/оформление баг-тикета
  TEST_DOC_WRITING // написание тест-кейсов, документации
  AUTOTEST_WRITING // написание автотестов (код)
  MEETING // участие в созвонах
  IDLE // простои: нет активности более X секунд
  REVIEW // просмотр чужих багов, тестов, документации
  TEST_ENV_SETUP // подготовка окружения, перезапуск тестируемого сервера
  EXPLORATORY_RESEARCH // изучение продукта, анализ бизнес-логики
  PAUSE_MANUAL // пользователь явно нажал “Пауза” (в будущем, опционально)
}
